import numpy as np

# generated by chatGPT3.5
picking_instructions = \
    ["Pick up [color] [object name].",
     "Retrieve a [object name] of the [color] variety.",
     "Gather a [color] [object name].",
     "Select a [object name] that is [color].",
     "Choose [color] [object name] from the collection.",
     "Find and collect a [color] [object name].",
     "Acquire a [object name] in the shade of [color].",
     "Pluck a [object name] that is [color].",
     "Handpick a [color] [object name].",
     "Secure a [object name] with the color [color].",
     "Locate and take a [color] [object name].",
     "Fetch a [object name] in the [color] variant.",
     "Hand-select a [color] [object name].",
     "Procure a [object name] with the color [color].",
     "Harvest a [color] [object name].",
     "Obtain a [color] variety of [object name].",
     "Retrieve a [color] [object name] from the orchard.",
     "Pick out a [color] [object name] from the bunch.",
     "Collect a [object name] in [color] form.",
     "Search for and bring a [color] [object name].", ]


# generated by chatGPT3.5
picking_instructions_shape = \
    ["Pick up a [object name].",
     "Retrieve a [object name].",
     "Gather a [object name].",
     "Select a [object name].",
     "Choose a [object name] from the collection.",
     "Find and collect a [object name].",
     "Acquire a [object name].",
     "Pluck a [object name].",
     "Handpick a [object name].",
     "Secure a [object name].",
     "Locate and take a [object name].",
     "Fetch a [object name] in the.",
     "Hand-select a [object name].",
     "Procure a [object name].",
     "Harvest a [object name].",
     "Obtain a [object name].",
     "Retrieve a [object name] from the orchard.",
     "Pick out a [object name] from the bunch.",
     "Collect a [object name].",
     "Search for and bring a [object name].", ]


picking_instructions_shape_part = \
    ["Pick up a [object name] by the [part].",
     "Retrieve a [object name] by the [part].",
     "Gather a [object name] by the [part].",
     "Select a [object name] by the [part].",
     "Choose a [object name] by the [part] from the collection.",
     "Find and collect a [object name] by the [part].",
     "Acquire a [object name] by the [part].",
     "Pluck a [object name] by the [part].",
     "Handpick a [object name] by the [part].",
     "Secure a [object name] by the [part].",
     "Locate and take a [object name] by the [part].",
     "Fetch a [object name] in the by the [part].",
     "Hand-select a [object name] by the [part].",
     "Procure a [object name] by the [part].",
     "Harvest a [object name] by the [part].",
     "Obtain a [object name] by the [part].",
     "Retrieve a [object name] by the [part] from the orchard.",
     "Pick out a [object name] by the [part] from the bunch.",
     "Collect a [object name] by the [part].",
     "Search for and bring a [object name] by the [part].", ]


picking_instructions_texture = \
    ["Pick up [texture] [object name].",
     "Retrieve a [object name] of the [texture] texture.",
     "Gather a [texture] texture [object name].",
     "Select a [object name] that is [texture].",
     "Choose [texture] [object name] from the collection.",
     "Find and collect a [texture] [object name].",
     "Acquire a [object name] with [texture].",
     "Pluck a [object name] that has [texture] texture.",
     "Handpick a [texture] style [object name].",
     "Secure a [object name] with the [texture].",
     "Locate and take a [texture] [object name].",
     "Fetch a [object name] in the [texture] variant.",
     "Hand-select a [texture] [object name].",
     "Procure a [object name] with the texture [texture].",
     "Harvest a [texture] style [object name].",
     "Obtain a [texture] variety of [object name].",
     "Retrieve a [texture] [object name] from the orchard.",
     "Pick out a [texture] [object name] from the bunch.",
     "Collect a [object name] in [texture] form.",
     "Search for and bring a [texture] [object name].", ]


picking_instructions_caption = \
    ["Pick up [caption] [object name].",
     "Retrieve a [object name] of the [caption].",
     "Gather a [caption] captioned [object name].",
     "Select a [object name] that contains [caption].",
     "Choose [caption] [object name] from the collection.",
     "Find and collect a [caption] [object name].",
     "Acquire a [object name] with [caption].",
     "Pluck a [object name] that has [caption].",
     "Handpick a [caption] labeled [object name].",
     "Secure a [object name] with the [caption].",
     "Locate and take a [texture] [object name].",
     "Fetch a [object name] filling with [caption].",
     "Hand-select a [caption] [object name].",
     "Procure a [object name] with the [caption].",
     "Harvest a [caption] labeled [object name].",
     "Obtain a [caption] tagged [object name].",
     "Retrieve a [caption] [object name] from the orchard.",
     "Pick out a [caption] [object name] from the bunch.",
     "Collect a [object name] with [caption] tag.",
     "Search for and bring a [caption] [object name].", ]





def generate_pick_instruction(info, method='all'):
    color = info['color']
    object = info['shape']
    ins_list = []
    if method == 'random':
        ins_idx = np.random.randint(0, len(picking_instructions))
        ins_sample = picking_instructions[ins_idx].replace("[color]", f"{color}").replace("[object name]", f"{object}")
        ins_list.append(ins_sample)
    elif method == 'all':
        for instruction in picking_instructions:
            ins_sample = instruction.replace("[color]", f"{color}").replace("[object name]", f"{object}")
            ins_list.append(ins_sample)
    else:
        NotImplementedError
    return ins_list


def generate_pick_instruction_shape(info, method='all'):
    object = info['shape']
    ins_list = []
    if method == 'random':
        ins_idx = np.random.randint(0, len(picking_instructions_shape))
        ins_sample = picking_instructions_shape[ins_idx].replace("[object name]", f"{object}")
        ins_list.append(ins_sample)
    elif method == 'all':
        for instruction in picking_instructions_shape:
            ins_sample = instruction.replace("[object name]", f"{object}")
            ins_list.append(ins_sample)
    else:
        NotImplementedError
    return ins_list


def generate_pick_instruction_shape_part(info, method='all'):
    object = info['shape']
    # print(info.keys())
    # print(info)
    part = info['part']
    ins_list = []
    if method == 'random':
        ins_idx = np.random.randint(0, len(picking_instructions_shape_part))
        ins_sample = picking_instructions_shape_part[ins_idx].replace("[object name]", f"{object}").replace("[part]", f"{part}")
        ins_list.append(ins_sample)
    elif method == 'all':
        for instruction in picking_instructions_shape_part:
            ins_sample = instruction.replace("[object name]", f"{object}").replace("[part]", f"{part}")
            ins_list.append(ins_sample)
    else:
        NotImplementedError
    return ins_list


def generate_pick_instruction_texture(info, method='all'):
    texture = info['texture']
    object = info['shape']

    ins_list = []
    if method == 'random':
        ins_idx = np.random.randint(0, len(picking_instructions_texture))
        ins_sample = picking_instructions_texture[ins_idx].replace("[texture]", f"{texture}").replace("[object name]", f"{object}")
        ins_list.append(ins_sample)
    elif method == 'all':
        for instruction in picking_instructions_texture:
            ins_sample = instruction.replace("[texture]", f"{texture}").replace("[object name]", f"{object}")
            ins_list.append(ins_sample)
    else:
        NotImplementedError
    return ins_list


def generate_pick_instruction_caption(info, method='all'):
    caption = info['caption']
    object = info['shape']

    ins_list = []
    if method == 'random':
        ins_idx = np.random.randint(0, len(picking_instructions_caption))
        ins_sample = picking_instructions_caption[ins_idx].replace("[caption]", f"{caption}").replace("[object name]", f"{object}")
        ins_list.append(ins_sample)

    elif method == 'all':
        for instruction in picking_instructions_caption:
            ins_sample = instruction.replace("[caption]", f"{caption}").replace("[object name]", f"{object}")
            ins_list.append(ins_sample)
    else:
        NotImplementedError
    return ins_list




# info = {'color': '', 'shape':'ell'}
# ins_list = generate_pick_instruction_shape(info,method='random')
# print(ins_list)

#
# a = 'pick_ell'
#
# b = a.replace('_'," ")
# print(b)
